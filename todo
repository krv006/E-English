
SERIALIZER

from rest_framework.fields import IntegerField


from apps.models import Category, Product

class CategoryModelSerializer(ModelSerializer):
    class Meta:
        model = Category
        fields = '__all__'


class ProductModelSerializer(ModelSerializer):
    price = IntegerField(default=0)

    class Meta:
        model = Product
        fields = '__all__'
        # exclude = 'id',

    def to_representation(self, instance: Product):
        repr = super().to_representation(instance)
        repr['category'] = CategoryModelSerializer(instance.category).data
        # repr['key'] = 'value' #todo buyodan xolagan narsamizani qoshib qoyse boladi
        return repr


FILTER

from django_filters.rest_framework import FilterSet

from apps.models import Product


class ProductFilterSet(FilterSet):
    class Meta:
        model = Product
        fields = 'category',  # todo category ga tegishli productlarni chiqazib beradi



MODEL



class BaseSlugModel(Model):
    name = CharField(max_length=255)
    slug = SlugField(unique=True, blank=True)
    created_at = DateTimeField(auto_now_add=True)

    class Meta:
        abstract = True

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
            original_slug = self.slug
            counter = 1
            while self.__class__.objects.filter(slug=self.slug).exists():
                self.slug = f"{original_slug}-{counter}"
                counter += 1
        super().save(*args, **kwargs)

    def __str__(self):
        return self.name


class Category(BaseSlugModel):
    pass


class Product(BaseSlugModel):
    price = FloatField(default=0)
    discount = FloatField(default=0)
    description = TextField(null=True, blank=True)
    category = ForeignKey('apps.Category', CASCADE, related_name='product_category')

URLS

from django.urls import path

from apps.views import CategoryListCreateAPIView, ProductListCreateAPIView, CategoryRetrieveUpdateDestroyAPIView, \
    ProductRetrieveUpdateDestroyAPIView

urlpatterns = [
    path('category/', CategoryListCreateAPIView.as_view()),
    path('category/<int:pk>', CategoryRetrieveUpdateDestroyAPIView.as_view()),
    path('product/', ProductListCreateAPIView.as_view()),
    path('product/<int:pk>', ProductRetrieveUpdateDestroyAPIView.as_view())
]


VIEWS

from django.shortcuts import render
from django_filters.rest_framework import DjangoFilterBackend
from rest_framework.generics import ListCreateAPIView, RetrieveUpdateDestroyAPIView

from drf_spectacular.utils import extend_schema

from apps.filter import ProductFilterSet
from apps.models import Category, Product
from apps.serializer import CategoryModelSerializer, ProductModelSerializer


@extend_schema(tags=['category'])
class CategoryListCreateAPIView(ListCreateAPIView):
    queryset = Category.objects.all()
    serializer_class = CategoryModelSerializer


@extend_schema(tags=['category_detail'])
class CategoryRetrieveUpdateDestroyAPIView(RetrieveUpdateDestroyAPIView):
    queryset = Category.objects.all()
    serializer_class = CategoryModelSerializer


@extend_schema(tags=['product'])
class ProductListCreateAPIView(ListCreateAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductModelSerializer
    filter_backends = DjangoFilterBackend,
    # filterset_fields = 'category',
    filterset_class = ProductFilterSet

@extend_schema(tags=['product_detail'])
class ProductRetrieveUpdateDestroyAPIView(RetrieveUpdateDestroyAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductModelSerializer



